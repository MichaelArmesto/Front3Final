import type { NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link'; // Importa el componente Link de Next.js
import LayoutGeneral from 'dh-marvel/components/layouts/layout-general';
import { useEffect, useState } from 'react';
import { Grid, Card, CardContent, CardMedia, Typography, Button, CircularProgress, Box } from '@mui/material';

const getRandomColor = () => {
  const colors = ['#FFCDD2', '#E1BEE7', '#BBDEFB', '#C8E6C9', '#FFECB3', '#FFAB91', '#B2EBF2', '#D1C4E9', '#F0F4C3'];
  return colors[Math.floor(Math.random() * colors.length)];
};

interface Comic {
  id: number;
  title: string;
  price:number;
  thumbnail: {
    path: string;
    extension: string;
  };
  images: {
    path: string;
    extension: string;
  }[];
}

const Index: NextPage = () => {
  const [comics, setComics] = useState<Comic[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [page, setPage] = useState(0); // Estado para la paginación
  const itemsPerPage = 12; // Número de cómics por página

  const fetchComics = async (page: number) => {
    try {
      setLoading(true);
      const offset = page * itemsPerPage; // Calcular el desplazamiento basado en la página
      const response = await fetch(`/api/comics?limit=${itemsPerPage}&offset=${offset}`);
      if (!response.ok) {
        throw new Error('Error al obtener los cómics');
      }
      const data = await response.json();
      setComics(data.data.results);
      console.log(data.data.results)
      setLoading(false);
    } catch (err) {
      setError('Error al cargar los cómics');
      setLoading(false);
      console.error('Error al cargar los cómics:', err);
    }
  };

  useEffect(() => {
    fetchComics(page); // Obtener cómics cuando cambie la página
  }, [page]); // Dependencia en el estado de la página

  const handleNextPage = () => {
    setPage(prevPage => prevPage + 1); // Incrementar la página en uno
  };

  const handlePreviousPage = () => {
    setPage(prevPage => Math.max(prevPage - 1, 0)); // Decrementar la página en uno
  };

  return (
    <LayoutGeneral>
      <Head>
        <title>Marvel Comics App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Estilos CSS en línea utilizando `sx` */}
      <style jsx global>{`
        .layout-content {
          display: block !important; /* Sobrescribe display: flex */
          width: 100%;
        }
      `}</style>

      {loading ? (
        <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
          <CircularProgress size={60} thickness={4.5} />
        </Box>
      ) : error ? (
        <Typography variant="h6" align="center" color="error">{error}</Typography>
      ) : (
        <>
          {/* Contenedor de las tarjetas de cómics */}
          <Grid container spacing={3} padding={3} justifyContent="center" sx={{ minHeight: '70vh' }}>
            {comics.map((comic) => (
              <Grid item xs={12} sm={6} md={4} lg={3} key={comic.id}>
                <Card
                  sx={{
                    width: 250,
                    height: 350,
                    position: 'relative',
                    margin: 'auto',
                    overflow: 'hidden',
                    boxShadow: '0 8px 16px rgba(0, 0, 0, 0.2)',
                    borderRadius: 2,
                    backgroundColor: getRandomColor(),
                    transition: 'transform 0.3s ease, box-shadow 0.3s ease',
                    '&:hover': {
                      transform: 'scale(1.05)',
                      boxShadow: '0 12px 24px rgba(0, 0, 0, 0.3)',
                    },
                    '&:hover .hover-overlay': { opacity: 1 },
                  }}
                >
                  <Box sx={{ width: '100%', height: '80%', position: 'relative', overflow: 'hidden' }}>
                    {comic.images && comic.images.length > 0 ? (
                      <CardMedia
                        component="img"
                        image={`${comic.images[0].path}.${comic.images[0].extension}`}
                        alt={comic.title}
                        sx={{
                          width: '100%',
                          height: '100%',
                          objectFit: 'cover',
                          display: 'block',
                        }}
                      />
                    ) : (
                      <Box
                        sx={{
                          width: '100%',
                          height: '100%',
                          backgroundColor: 'black',
                          display: 'flex',
                          justifyContent: 'center',
                          alignItems: 'center',
                          color: 'white',
                        }}
                      >
                        <Typography variant="h6">No Image</Typography>
                      </Box>
                    )}
                    <Box
                      className="hover-overlay"
                      sx={{
                        position: 'absolute',
                        bottom: 0,
                        width: '100%',
                        height: '100%',
                        background: 'linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0))',
                        opacity: 0,
                        transition: 'opacity 0.3s ease',
                        display: 'flex',
                        justifyContent: 'center',
                        alignItems: 'flex-end',
                        borderRadius: 'inherit',
                        paddingBottom: 1,
                      }}
                    >
                      <Typography variant="h6" color="white" align="center" sx={{ padding: 1 }}>
                        {comic.title}
                      </Typography>
                    </Box>
                  </Box>
                  <CardContent sx={{ textAlign: 'center', padding: 1 }}>
  <Box sx={{ display: 'flex', justifyContent: 'center' }}>
    {/* Link a la página de checkout */}
    <Link href={`/checkout/${comic.id}`} passHref>
  <Button variant="contained" color="primary" size="small" sx={{ marginRight: 1 }}>
    Comprar
  </Button>
</Link>

    {/* Link a la página de detalle del cómic */}
    <Link href={`/comics/${comic.id}`} passHref>
      <Button variant="outlined" color="secondary" size="small">
        Ver detalle
      </Button>
    </Link>
  </Box>
</CardContent>

                </Card>
              </Grid>
            ))}
          </Grid>

          {/* Contenedor de los botones de paginación */}
          <Box display="flex" justifyContent="center" marginTop={4} gap={2} paddingBottom={4}>
            <Button variant="outlined" onClick={handlePreviousPage} disabled={page === 0}>
              Anterior
            </Button>
            <Button variant="outlined" onClick={handleNextPage}>
              Siguiente
            </Button>
          </Box>
        </>
      )}
    </LayoutGeneral>
  );
};

export default Index;
