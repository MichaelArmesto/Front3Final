// pages/index.tsx
import type { NextPage } from 'next';
import Head from 'next/head';
import BodySingle from 'dh-marvel/components/layouts/body/single/body-single';
import { useEffect, useState } from 'react';
import { Grid, Card, CardContent, CardMedia, Typography, Button, CircularProgress, Box } from '@mui/material';

// Funci贸n para generar un color de fondo aleatorio
const getRandomColor = () => {
  const colors = ['#FFCDD2', '#E1BEE7', '#BBDEFB', '#C8E6C9', '#FFECB3', '#FFAB91', '#B2EBF2', '#D1C4E9', '#F0F4C3'];
  return colors[Math.floor(Math.random() * colors.length)];
};

interface Comic {
  id: number;
  title: string;
  thumbnail: {
    path: string;
    extension: string;
  };
  images: {
    path: string;
    extension: string;
  }[];
}

const Index: NextPage = () => {
  const [comics, setComics] = useState<Comic[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [page, setPage] = useState(0);

  const fetchComics = async (page: number) => {
    try {
      setLoading(true);
      const offset = page * 12;
      const response = await fetch(`/api/comics?limit=12&offset=${offset}`);
      if (!response.ok) {
        throw new Error('Error al obtener los c贸mics');
      }
      const data = await response.json();
      setComics(data.data.results);
      setLoading(false);
    } catch (err) {
      setError('Error al cargar los c贸mics');
      setLoading(false);
      console.error('Error al cargar los c贸mics:', err);
    }
  };

  useEffect(() => {
    fetchComics(page);
  }, [page]);

  const handleNextPage = () => {
    setPage(prevPage => prevPage + 1);
  };

  const handlePreviousPage = () => {
    setPage(prevPage => Math.max(prevPage - 1, 0));
  };

  return (
    <>
      <Head>
        <title>Marvel Comics App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <BodySingle title={"Marvel Comics"}>
        {loading ? (
          <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
            <CircularProgress size={60} thickness={4.5} />
          </Box>
        ) : error ? (
          <Typography variant="h6" align="center" color="error">{error}</Typography>
        ) : (
          <>
            <Grid container spacing={3} padding={3} justifyContent="center">
              {comics.map((comic) => (
                <Grid item xs={12} sm={6} md={4} lg={3} key={comic.id}>
                  <Card
                    sx={{
                      width: 250,
                      height: 350,
                      position: 'relative',
                      margin: 'auto',
                      overflow: 'hidden',
                      boxShadow: '0 8px 16px rgba(0, 0, 0, 0.2)',
                      borderRadius: 2,
                      backgroundColor: getRandomColor(),
                      transition: 'transform 0.3s ease, box-shadow 0.3s ease',
                      '&:hover': {
                        transform: 'scale(1.05)',
                        boxShadow: '0 12px 24px rgba(0, 0, 0, 0.3)',
                      },
                      '&:hover .hover-overlay': { opacity: 1 },
                    }}
                  >
                    {/* Contenedor de la Imagen */}
                    <Box sx={{ width: '100%', height: '80%', position: 'relative', overflow: 'hidden' }}>
                      {comic.images && comic.images.length > 0 ? (
                        <CardMedia
                          component="img"
                          image={`${comic.images[0].path}.${comic.images[0].extension}`}
                          alt={comic.title}
                          sx={{ 
                            width: '100%', 
                            height: '100%', 
                            objectFit: 'cover',
                            display: 'block'
                          }} 
                        />
                      ) : (
                        <Box
                          sx={{
                            width: '100%',
                            height: '100%',
                            backgroundColor: 'black',
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                            color: 'white',
                          }}
                        >
                          <Typography variant="h6">No Image</Typography>
                        </Box>
                      )}

                      {/* Overlay de Hover solo sobre la imagen */}
                      <Box
                        className="hover-overlay"
                        sx={{
                          position: 'absolute',
                          bottom: 0,
                          width: '100%',
                          height: '100%',
                          background: 'linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0))',
                          opacity: 0,
                          transition: 'opacity 0.3s ease',
                          display: 'flex',
                          justifyContent: 'center',
                          alignItems: 'flex-end',
                          borderRadius: 'inherit',
                          paddingBottom: 1,
                        }}
                      >
                        <Typography variant="h6" color="white" align="center" sx={{ padding: 1 }}>
                          {comic.title}
                        </Typography>
                      </Box>
                    </Box>

                    {/* Contenedor de los Botones */}
                    <CardContent sx={{ textAlign: 'center', padding: 1 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                        <Button variant="contained" color="primary" size="small" sx={{ marginRight: 1 }}>
                          Comprar
                        </Button>
                        <Button variant="outlined" color="secondary" size="small">
                          Ver detalle
                        </Button>
                      </Box>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
            <Box display="flex" justifyContent="center" marginTop={4}>
              <Button variant="outlined" onClick={handlePreviousPage} disabled={page === 0} sx={{ marginRight: 2 }}>
                Anterior
              </Button>
              <Button variant="outlined" onClick={handleNextPage}>
                Siguiente
              </Button>
            </Box>
          </>
        )}
      </BodySingle>
    </>
  );
};

export default Index;
